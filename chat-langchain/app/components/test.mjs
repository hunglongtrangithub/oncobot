import pkg from 'fast-json-patch';
const { applyPatch } = pkg;
// let chunk = {"ops":[
//   {"op": "replace", path: "", "value": {}}, 
//   {"op": "add", path: "/logs", "value": {}}, 
//   {"op": "add", path: "/logs/FindDocs", "value": {}}, 
//   {"op":"add","path":"/logs/FindDocs/final_output","value":{
//   "output":[{"page_content":"🦜️🔗 Langchain","metadata":{"source":"https://python.langchain.com/","title":"🦜️🔗 Langchain","description":"","language":"en","loc":"https://python.langchain.com/","changefreq":"weekly","priority":"0.5"},"type":"Document"},{"page_content":"Get started | 🦜️🔗 Langchain\n\n[Skip to main content](#__docusaurus_skipToContent_fallback)# Get started\n\nGet started with LangChain\n\n[📄️ IntroductionLangChain is a framework for developing applications powered by language models. It enables applications that:](/docs/get_started/introduction)[📄️ InstallationOfficial release](/docs/get_started/installation)[📄️ QuickstartIn this quickstart we'll show you how to:](/docs/get_started/quickstart)[📄️ SecurityLangChain has a large ecosystem of integrations with various external resources like local and remote file systems, APIs and databases. These integrations allow developers to create versatile applications that combine the power of LLMs with the ability to access, interact with and manipulate external resources.](/docs/security)","metadata":{"source":"https://python.langchain.com/docs/get_started","title":"Get started | 🦜️🔗 Langchain","description":"Get started with LangChain","language":"en","loc":"https://python.langchain.com/docs/get_started","changefreq":"weekly","priority":"0.5"},"type":"Document"},{"page_content":"LangChain Templates | 🦜️🔗 Langchain\n\n[Skip to main content](#__docusaurus_skipToContent_fallback)# LangChain Templates\n\nFor more information on LangChain Templates, visit \n\n- [LangChain Templates Quickstart](https://github.com/langchain-ai/langchain/blob/master/templates/README.md)\n\n- [LangChain Templates Index](https://github.com/langchain-ai/langchain/blob/master/templates/docs/INDEX.md)\n\n- [Full List of Templates](https://github.com/langchain-ai/langchain/blob/master/templates/)","metadata":{"source":"https://python.langchain.com/docs/guides/deployments/template_repos","title":"LangChain Templates | 🦜️🔗 Langchain","description":"For more information on LangChain Templates, visit","language":"en","loc":"https://python.langchain.com/docs/guides/deployments/template_repos","changefreq":"weekly","priority":"0.5"},"type":"Document"},{"page_content":"Introduction | 🦜️🔗 Langchain\n\n[Skip to main content](#__docusaurus_skipToContent_fallback)# Introduction\n\n**LangChain** is a framework for developing applications powered by language models. It enables applications that:\n\n- **Are context-aware**: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n\n- **Reason**: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\n- **LangChain Libraries**: The Python and JavaScript libraries. Contains interfaces and integrations for a myriad of components, a basic run time for combining these components into chains and agents, and off-the-shelf implementations of chains and agents.\n\n- **LangChain Templates**: A collection of easily deployable reference architectures for a wide variety of tasks.\n\n- **LangServe**: A library for deploying LangChain chains as a REST API.\n\n- **LangSmith**: A developer platform that lets you debug, test, evaluate, and monitor chains built on any LLM framework and seamlessly integrates with LangChain.\n\n![Diagram outlining the hierarchical organization of the LangChain framework, displaying the interconnected parts across multiple layers.](/assets/images/langchain_stack-f21828069f74484521f38199910007c1.svg)\n\nTogether, these products simplify the entire application lifecycle:\n\n- **Develop**: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n\n- **Productionize**: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n\n- **Deploy**: Turn any chain into an API with LangServe.\n\n## LangChain Libraries​\n\nThe main value props of the LangChain packages are:\n\n1. **Components**: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n\n2. **Off-the-shelf chains**: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.\n\nThe LangChain libraries themselves are made up of several different packages.\n\n- **langchain-core**: Base abstractions and LangChain Expression Language.\n\n- **langchain-community**: Third party integrations.\n\n- **langchain**: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\n\n## Get started​\n\n[Here’s](/docs/get_started/installation) how to install LangChain, set up your environment, and start building.\n\nWe recommend following our [Quickstart](/docs/get_started/quickstart) guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our [Security](/docs/security) best practices to make sure you're developing safely with LangChain.\n\nnoteThese docs focus on the Python LangChain library. [Head here](https://js.langchain.com) for docs on the JavaScript LangChain library.\n\n## LangChain Expression Language (LCEL)​\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\n- **Overview**: LCEL and its benefits\n\n- **Interface**: The standard interface for LCEL objects\n\n- **How-to**: Key features of LCEL\n\n- **Cookbook**: Example code for accomplishing common tasks\n\n## Modules​\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\n#### Model I/O​\n\nInterface with language models\n\n#### Retrieval​\n\nInterface with application-specific data\n\n#### Agents​\n\nLet models choose which tools to use given high-level directives\n\n## Examples, ecosystem, and resources​\n\n### Use cases​\n\nWalkthroughs and techniques for common end-to-end use cases, like:","metadata":{"source":"https://python.langchain.com/docs/get_started/introduction","title":"Introduction | 🦜️🔗 Langchain","description":"LangChain is a framework for developing applications powered by language models. It enables applications that:","language":"en","loc":"https://python.langchain.com/docs/get_started/introduction","changefreq":"weekly","priority":"0.5"},"type":"Document"},{"page_content":"LangChain cookbook | 🦜️🔗 Langchain\n\n[Skip to main content](#__docusaurus_skipToContent_fallback)# LangChain cookbook\n\nExample code for building applications with LangChain, with an emphasis on more applied and end-to-end examples than contained in the [main documentation](https://python.langchain.com).","metadata":{"source":"https://python.langchain.com/cookbook","title":"LangChain cookbook | 🦜️🔗 Langchain","description":"Example code for building applications with LangChain, with an emphasis on more applied and end-to-end examples than contained in the main documentation.","language":"en","loc":"https://python.langchain.com/cookbook","changefreq":"weekly","priority":"0.5"},"type":"Document"},{"page_content":"- [LangChain benchmarks](#langchain-benchmarks)\n\n- [Reference Docs](#reference-docs)","metadata":{"source":"https://python.langchain.com/docs/guides/evaluation/","title":"Evaluation | 🦜️🔗 Langchain","description":"Building applications with language models involves many moving parts. One of the most critical components is ensuring that the outcomes produced by your models are reliable and useful across a broad array of inputs, and that they work well with your application's other software components. Ensuring reliability usually boils down to some combination of application design, testing & evaluation, and runtime checks.","language":"en","loc":"https://python.langchain.com/docs/guides/evaluation/","changefreq":"weekly","priority":"0.5"},"type":"Document"}]
//   }
// }]};

let chunk = {"ops":[
  {"op":"add","path":"/streamed_output","value":[]},
  {"op":"add","path":"/streamed_output/-","value":""},
  {"op": "add", "path": "/streamed_output/-", "value": "1"},
  {"op": "add", "path": "/streamed_output/-", "value": "2"},
  {"op": "add", "path": "/streamed_output/-", "value": "3"},
]}; 
let streamedResponse = {};
streamedResponse = applyPatch(
    streamedResponse,
    chunk.ops,
  ).newDocument;

console.log(streamedResponse);